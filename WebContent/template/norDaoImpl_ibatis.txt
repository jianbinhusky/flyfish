package %PackageName%.dao;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.orm.ibatis.support.*;
import org.springframework.dao.DataAccessException;

import com.ibatis.sqlmap.client.SqlMapExecutor;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import %PackageName%.search.%TableName%SearchBean;
import %PackageName%.bean.%TableName%;

/**
 * <p>Title: </p>
 *
 * <p>Description:%TableName%</p>
 *
 * <p>Copyright: Copyright (c) 2015</p>
 *
 * <p>Author: hujianbin</p>
 *
 * @author AutoCreate
 * @version 1.0
 */

public class %TableName%DaoImpl extends SqlMapClientDaoSupportExt implements %TableName%Dao {
	public %TableName%DaoImpl() {
		
    }

  	public void insert%TableName%(%TableName% %sTableName%) throws DataAccessException {
    	getSqlMapClientTemplate().insert("insert_%TableName%", %sTableName%);
  	}

  	public void update%TableName%(%TableName% %sTableName%) throws DataAccessException {
    	getSqlMapClientTemplate().update("update_%TableName%", %sTableName%);
  	}
  
  	public %TableName% get%TableName%ByWhere(String where) throws DataAccessException {
    	return (%TableName%) getSqlMapClientTemplate().queryForObject("get_%TableName%_ByWhere", where);
  	}
  
  	public List<%TableName%> get%TableName%ListByWhere(%TableName%SearchBean condition) throws DataAccessException {
    	return getSqlMapClientTemplate().queryForList("get_%TableName%_List_ByWhere_"+getDbType(), condition);
  	}
  	
  	public List<%TableName%> get%TableName%ListByCondition(%TableName%SearchBean condition) throws DataAccessException {
    	return getSqlMapClientTemplate().queryForList("get_%TableName%_List_ByCondition_"+getDbType(), condition);
  	}
  
  	public List<%TableName%> get%TableName%ListBySql(String sql) throws DataAccessException {
    	return getSqlMapClientTemplate().queryForList("get_%TableName%_ByWhere", sql);
  	}
  
  	public int get%TableName%CountByWhere(String where) throws DataAccessException {
    	Integer retVal = (Integer) getSqlMapClientTemplate().queryForObject("get_%TableName%_Count_ByWhere", where);
    	return retVal.intValue();
  	}
  	
  	public int get%TableName%CountByExample(%TableName% %sTableName%) throws DataAccessException {
    	Integer retVal = (Integer) getSqlMapClientTemplate().queryForObject("get_%TableName%_Count_ByExample", %sTableName%);
    	return retVal.intValue();
  	}
  	
  	public int get%TableName%CountByCondition(%TableName%SearchBean condition) throws DataAccessException {
  		Integer retVal = (Integer) getSqlMapClientTemplate().queryForObject("get_%TableName%_Count_ByCondition", condition);
    	return retVal.intValue();
  	}
  
  	public void update%TableName%ByWhere(String where) throws DataAccessException {
    	getSqlMapClientTemplate().update("update_%TableName%_ByWhere", where);
  	}
  
  	public void delete%TableName%ByWhere(String where) throws DataAccessException {
   		getSqlMapClientTemplate().delete("delete_%TableName%_ByWhere",where);
  	}
  	
  	public void batchInsert%TableName%(final List<%TableName%> list) throws DataAccessException{
  		getSqlMapClientTemplate().execute(new SqlMapClientCallback<Object>() {

			@Override
			public Object doInSqlMapClient(SqlMapExecutor arg0)
					throws SQLException {
				int size=list.size();
				arg0.startBatch();
				for(int i=1;i<=size;i++){
					arg0.insert("insert_%TableName%", list.get(i-1));
					if(i%500==0)
						arg0.executeBatch();
				}
				arg0.executeBatch();
				return null;
			}
		});
  	}
  	
  	public %TableName% get%TableName%ByExample(%TableName% %sTableName%) throws DataAccessException{
  		return (%TableName%) getSqlMapClientTemplate().queryForObject("get_%TableName%_ByExample", %sTableName%);
  	}
  	
  	public List<%TableName%> get%TableName%ListByExample(%TableName% %sTableName%) throws DataAccessException{
  		return getSqlMapClientTemplate().queryForList("get_%TableName%_ByExample", %sTableName%);
  	}
  	
  	public void delete%TableName%ByExample(%TableName% %sTableName%) throws DataAccessException{
  		getSqlMapClientTemplate().delete("delete_%TableName%_ByExample",%sTableName%);
  	}
  	
  	public void delete%TableName%ByCondition(%TableName%SearchBean condition) throws DataAccessException{
  		getSqlMapClientTemplate().delete("delete_%TableName%_ByCondition",condition);
  	}
  	
  	public void batchDelete%TableName%ByExample(final List<%TableName%> list) throws DataAccessException{
  		getSqlMapClientTemplate().execute(new SqlMapClientCallback<Object>() {

			@Override
			public Object doInSqlMapClient(SqlMapExecutor arg0)
					throws SQLException {
				int size=list.size();
				arg0.startBatch();
				for(int i=1;i<=size;i++){
					arg0.delete("delete_%TableName%_ByExample", list.get(i-1));
					if(i%500==0)
						arg0.executeBatch();
				}
				arg0.executeBatch();
				return null;
			}
		});
  	}
  	
  	public List<%TableName%> get%TableName%ByCondition(%TableName%SearchBean condition) throws DataAccessException {
    	return getSqlMapClientTemplate().queryForList("get_%TableName%_ByCondition", condition);
  	}
  	
  	public void update%TableName%(%TableName%SearchBean condition) throws DataAccessException{
  		getSqlMapClientTemplate().update("update_%TableName%_ByCondition", condition);
  	}
  	
  	public Map<String,Object> get%TableName%ColumnByCondition(%TableName%SearchBean condition) throws DataAccessException{
  		return (Map<String,Object>)getSqlMapClientTemplate().queryForObject("get_%TableName%_Column_ByWhere", condition);
  	}
  	
  	public void update%TableName%ByExample(%TableName% %sTableName%) throws DataAccessException{
  		getSqlMapClientTemplate().update("update_%TableName%_ByExample", %sTableName%);
  	}
}